<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>My Digital Garden</title><link>https://tolejarczuk.github.io/</link><description>Recent content on My Digital Garden</description><generator>Hugo -- 0.125.1</generator><language>en-us</language><atom:link href="https://tolejarczuk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;% tp.file.title %></title><link>https://tolejarczuk.github.io/posts/bins/templates/note-template-fontys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/bins/templates/note-template-fontys/</guid><description>&amp;lt;% tp.file.title %&amp;gt; Last Modified: =dateformat(this.file.mtime, &amp;quot;DDDD, HH:mm&amp;quot;)
Tags: =this.file.tags
List FROM #kubernetes</description></item><item><title>&lt;% tp.file.title %></title><link>https://tolejarczuk.github.io/posts/bins/templates/note-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/bins/templates/note-template/</guid><description>&amp;lt;% tp.file.title %&amp;gt; Last Modified: =dateformat(this.file.mtime, &amp;quot;DDDD, HH:mm&amp;quot;)
Tags: =this.file.tags
List FROM #kubernetes</description></item><item><title>delete</title><link>https://tolejarczuk.github.io/posts/bins/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/bins/delete/</guid><description>Create Multiline File # Creating a Multiple-Line File with `cat` and Here Document In Unix-like systems, you can use the `cat` command along with a Here Document (&amp;lt;&amp;lt;) to create a multiple-line file efficiently. This is particularly useful when you need to generate configuration files, such as an `application.properties` file. ## Syntax: ```bash cat &amp;lt;&amp;lt;EOF &amp;gt;application.properties &amp;lt;CONTENT&amp;gt; EOF Replace &amp;lt;CONTENT&amp;gt; with the actual content you want in the file.
Example: Suppose you want to create an application.</description></item><item><title>Meross plugs</title><link>https://tolejarczuk.github.io/posts/smart-home/hardware/meross-plugs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/smart-home/hardware/meross-plugs/</guid><description>Meross plugs ##Adding Meross plug
go to this website and follow the steps
to install required npm packages go to main directory that contains packages.json and run
npm install First put the device into pairing mode and connect to it run npx meross info The output should look like this: Getting info about device with IP 10.10.10.1
Device mss310 un rtl8710cf (hardware:6.0.0 firmware:6.3.22) UUID 2212016571094051070248e1e9b1af65 Mac address 48:e1:e9:b1:af:65 IP address 10.</description></item><item><title>Microservices notes</title><link>https://tolejarczuk.github.io/posts/microservices/microservices-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/microservices/microservices-notes/</guid><description>Microservices2 notes KEDA autoscaler that works well with dapr
DAPR microservices framework
Hashicorp Consul for microservices discovery</description></item><item><title>Repository Pattern</title><link>https://tolejarczuk.github.io/posts/programming/repository-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/programming/repository-pattern/</guid><description>Repository Pattern public class Repository&amp;lt;T&amp;gt; : IRepository&amp;lt;T&amp;gt; where T : EntityBase { private readonly ApplicationDbContext _dbContext; public Repository(ApplicationDbContext dbContext) { _dbContext = dbContext; } public virtual T GetById(int id) { return _dbContext.Set&amp;lt;T&amp;gt;().Find(id); } public virtual IEnumerable&amp;lt;T&amp;gt; List() { return _dbContext.Set&amp;lt;T&amp;gt;().AsEnumerable(); } public virtual IEnumerable&amp;lt;T&amp;gt; List(System.Linq.Expressions.Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate) { return _dbContext.Set&amp;lt;T&amp;gt;() .Where(predicate) .AsEnumerable(); } public void Insert(T entity) { _dbContext.Set&amp;lt;T&amp;gt;().Add(entity); _dbContext.SaveChanges(); } public void Update(T entity) { _dbContext.Entry(entity).State = EntityState.Modified; _dbContext.SaveChanges(); } public void Delete(T entity) { _dbContext.</description></item><item><title>Single Node Installation</title><link>https://tolejarczuk.github.io/posts/kubernetes/single-node-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/kubernetes/single-node-installation/</guid><description>Single Node Installation Last Modified: =dateformat(this.file.mtime, &amp;quot;DDDD, HH:mm&amp;quot;)
Tags: =this.file.tags
List FROM #kubernetes</description></item></channel></rss>