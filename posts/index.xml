<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on My Digital Garden</title><link>https://tolejarczuk.github.io/posts/</link><description>Recent content in Posts on My Digital Garden</description><generator>Hugo -- 0.125.3</generator><language>en-us</language><atom:link href="https://tolejarczuk.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding user to sudoers</title><link>https://tolejarczuk.github.io/posts/devops/linux/adding-user-to-sudoers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/devops/linux/adding-user-to-sudoers/</guid><description>Adding user to sudoers This guide provides a one-liner to add a user to the sudoers file in a secure and organized way. Instead of modifying the main /etc/sudoers file directly, we&amp;rsquo;ll create a new file in the /etc/sudoers.d/ directory.
One-Liner Command echo &amp;#34;$USER ALL=(ALL:ALL) NOPASSWD: ALL&amp;#34; | sudo tee /etc/sudoers.d/$USER This command creates a new file with the same name as the current user in the /etc/sudoers.d/ directory, specifying the sudo configuration for that user.</description></item><item><title>Ansible</title><link>https://tolejarczuk.github.io/posts/devops/ansible/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/devops/ansible/ansible/</guid><description>Ansible Ansible playbook syntax: ansible-playbook ./playbooks/apt.yml -i ./inventory/hosts.ini Ansible global directory error on Windows Unmont and mount C drive in WSL sudo umount /mnt/c &amp;amp;&amp;amp; sudo mount -t drvfs C: /mnt/c -o metadata Go to ansible directory cd /mnt/c/Users/Tom/ansible Change permissions sudo chmod o-w . Last Modified: =dateformat(this.file.mtime, &amp;quot;DDDD, HH:mm&amp;quot;)
Tags: =this.file.tags
List FROM #ansible</description></item><item><title>CI/CD Pipeline for MATLAB Algorithm Deployment</title><link>https://tolejarczuk.github.io/posts/school/semester-4/teamium-project/cicd-pipeline-for-matlab-algorithm-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/school/semester-4/teamium-project/cicd-pipeline-for-matlab-algorithm-deployment/</guid><description>CI/CD Pipeline for MATLAB Algorithm Deployment 1. Summary This document outlines the CI/CD (Continuous Integration/Continuous Delivery) pipeline implemented for the MATLAB algorithm project. Utilizing GitHub Actions, the pipeline automates the process of building, versioning and deploying Docker images containing the MATLAB algorithm to the GitHub Container Registry (GHCR). The pipeline is triggered whenever changes are pushed to the &amp;lsquo;main&amp;rsquo; branch, ensuring that the latest version of the algorithm is readily available for deployment, streamlining the development and release process.</description></item><item><title>Create Multiline File</title><link>https://tolejarczuk.github.io/posts/devops/linux/create-multiline-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/devops/linux/create-multiline-file/</guid><description>Create Multiline File # Creating a Multiple-Line File with `cat` and Here Document In Unix-like systems, you can use the `cat` command along with a Here Document (&amp;lt;&amp;lt;) to create a multiple-line file efficiently. This is particularly useful when you need to generate configuration files, such as an `application.properties` file. ## Syntax: ```bash cat &amp;lt;&amp;lt;EOF &amp;gt;application.properties &amp;lt;CONTENT&amp;gt; EOF Replace &amp;lt;CONTENT&amp;gt; with the actual content you want in the file.
Example: Suppose you want to create an application.</description></item><item><title>Generate Random Password</title><link>https://tolejarczuk.github.io/posts/devops/linux/generate-random-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/devops/linux/generate-random-password/</guid><description>Generating Random Text for Passwords Creating strong and unique passwords is crucial for securing your online accounts. One effective way to generate secure passwords is by using random text. Here are a few methods you can employ to generate random text for passwords:
1. Using Password Managers: Password managers are excellent tools for generating and storing secure passwords. Most password managers have built-in password generators that can create strong and unique passwords with a click.</description></item><item><title>Microservices</title><link>https://tolejarczuk.github.io/posts/school/semester-4/asml-project/microservices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/school/semester-4/asml-project/microservices/</guid><description>Microservices 1. Introduction 1.1 Evolution of Software Architectures The evolution of software architectures has seen a shift from monolithic applications to more modular and scalable approaches. Microservices architecture has emerged as a leading paradigm, offering a set of principles that promote agility and efficiency in software development.
1.2 Objectives The primary objectives of this paper are to:
Explain the core concepts of microservices architecture. Highlight the advantages of adopting microservices. Showcase successful implementations of microservices in industry.</description></item><item><title>Microservices notes</title><link>https://tolejarczuk.github.io/posts/microservices/microservices-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/microservices/microservices-notes/</guid><description>Microservices notes KEDA autoscaler that works well with dapr
DAPR microservices framework
Hashicorp Consul for microservices discovery</description></item><item><title>Remove duplicate entries</title><link>https://tolejarczuk.github.io/posts/databases/postgresql/remove-duplicate-rows-in-postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/databases/postgresql/remove-duplicate-rows-in-postgresql/</guid><description>Remove Duplicate Rows in PostgreSQL The provided code snippet offers a way to remove duplicate rows in a PostgreSQL table (named &amp;rsquo;enc_history_entries&amp;rsquo;) based on the &amp;rsquo;encrypted_data&amp;rsquo; column. Let&amp;rsquo;s break down the steps:
insert into enc_history_entries_temp(encrypted_data, nonce, device_id, user_id, &amp;#34;date&amp;#34;, encrypted_id, read_count) select distinct on (encrypted_data) encrypted_data, nonce, device_id, user_id, &amp;#34;date&amp;#34;, encrypted_id, read_count from enc_history_entries; drop table enc_history_entries; alter table enc_history_entries_temp rename to enc_history_entries; Temporary Table: insert into enc_history_entries_temp...: Creates a temporary table and inserts distinct rows from the original table.</description></item><item><title>Repository Pattern</title><link>https://tolejarczuk.github.io/posts/programming/repository-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tolejarczuk.github.io/posts/programming/repository-pattern/</guid><description>Repository Pattern public class Repository&amp;lt;T&amp;gt; : IRepository&amp;lt;T&amp;gt; where T : EntityBase { private readonly ApplicationDbContext _dbContext; public Repository(ApplicationDbContext dbContext) { _dbContext = dbContext; } public virtual T GetById(int id) { return _dbContext.Set&amp;lt;T&amp;gt;().Find(id); } public virtual IEnumerable&amp;lt;T&amp;gt; List() { return _dbContext.Set&amp;lt;T&amp;gt;().AsEnumerable(); } public virtual IEnumerable&amp;lt;T&amp;gt; List(System.Linq.Expressions.Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; predicate) { return _dbContext.Set&amp;lt;T&amp;gt;() .Where(predicate) .AsEnumerable(); } public void Insert(T entity) { _dbContext.Set&amp;lt;T&amp;gt;().Add(entity); _dbContext.SaveChanges(); } public void Update(T entity) { _dbContext.Entry(entity).State = EntityState.Modified; _dbContext.SaveChanges(); } public void Delete(T entity) { _dbContext.</description></item></channel></rss>